{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","target","getGifs","category","a","urlGIF","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAchD,OACE,mCACE,sBAAMC,SAVW,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAMd,SACE,uBACEO,KAAK,OACLC,YAAY,sBACZC,MAAOV,EACPW,SAnBkB,SAACR,GACzBF,EAAcE,EAAES,OAAOF,e,+BCNdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACT,mCACNC,EAFe,uDACT,mCADS,cAEmDC,UACtEH,GAHmB,gDAKFI,MAAMF,GALJ,cAKfG,EALe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAZjB,kBAgBdL,GAhBc,4CAAH,sDCEPQ,EAAc,SAAC,GAAuB,EAArBL,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEvC,OACE,sBAAKI,UAAU,wCAAf,UACE,qBAAKC,IAAKL,EAAKM,IAAKP,IACpB,4BAAIA,QCHGQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdf,mBAAS,CACjCsB,KAAM,GACNc,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAU,WACRzB,EAAQC,GAAUyB,MAAK,SAACC,GAEpBH,EAAS,CACPhB,KAAMmB,EACNL,SAAS,SAGd,CAACrB,IAEGsB,EDd2BK,CAAa3B,GAAjCc,EADyB,EAC/BP,KAAcc,EADiB,EACjBA,QAEtB,OACE,qCACE,qBAAIJ,UAAU,2CAAd,cAA2DjB,EAA3D,OACCqB,GAAW,oBAAIJ,UAAU,mCAAd,oCACZ,sBAAKA,UAAU,YAAf,UACE,uBACCH,EAAOL,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,UAG1B,2BEbOiB,EAAe,WAAO,IAAD,EACI3C,mBAAS,CAAC,UADd,mBACzB4C,EADyB,KACb7C,EADa,KAGhC,OACE,qCACE,4CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACG6C,EAAWpB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCTxB8B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.dd4935a9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport setCategories from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search ðŸ”Ž\"\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n        />\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: setCategories.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  const key = \"XqCRv1HEDWIYiqu7eFTicBreMtRSceaF\";\r\n  const urlGIF = `https://api.giphy.com/v1/gifs/search?api_key=${key}&q=${encodeURI(\r\n    category\r\n  )}&limit=10&offset=0&rating=g&lang=en`;\r\n  const resp = await fetch(urlGIF);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  // console.log(gifs)\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  // console.log(id);\r\n  return (\r\n    <div className=\"animate__animated animate__pulse card\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeInLeftBig\"> {category} </h3>\r\n      {loading && <h4 className=\"animate__animated animate__flash\"> Loading ðŸ”„ </h4>}\r\n      <div className=\"card-grid\">\r\n        <br />\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n      <hr />\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n     \r\n        setState({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"Panda\"]);\r\n\r\n  return (\r\n    <>\r\n      <h1> Giphy App</h1>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}